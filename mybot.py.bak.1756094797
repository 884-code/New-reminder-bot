# ==== PRELUDE_STUBS (NameError対策) ====
import logging, sqlite3
logger = logging.getLogger(__name__)

# init_database が無ければスタブを用意
try:
    init_database
except NameError:
    def init_database():
        try: logger.info("[init] スタブ実行（本体未定義）")
        except Exception: pass
        # DBファイルを触っておくだけ（本体があればそちらが使われる）
        conn = sqlite3.connect('reminder_bot.db'); conn.close()

# setup_roles が無ければスタブを用意
try:
    setup_roles
except NameError:
    import discord as _d
    async def setup_roles(guild: _d.Guild):
        try: logger.info(f"[setup_roles] スタブ実行（{getattr(guild,'name','?')}）")
        except Exception: pass
        return None, None
# ==== /PRELUDE_STUBS ====
# -*- coding: utf-8 -*-
# mybot.py (failsafe setup edition)
import os, re, json, sqlite3, logging, asyncio
from datetime import datetime, timedelta
from typing import Optional, List

import discord
from discord import app_commands
from discord.ext import commands, tasks

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)-8s %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("bot.log", encoding="utf-8")]
)
logger = logging.getLogger("taskbot")

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.message_content = True

bot = commands.Bot(
    command_prefix=commands.when_mentioned_or("!", "！", "/"),
    intents=intents,
    case_insensitive=True,
    help_command=None,
    max_messages=100,
)

DB_PATH = "reminder_bot.db"
def db_exec(q: str, params: tuple = (), fetch=False):
    conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
    cur.execute(q, params); rows = cur.fetchall() if fetch else None
    conn.commit(); conn.close(); return rows

def init_db():
    db_exec("""CREATE TABLE IF NOT EXISTS admins(user_id INTEGER, guild_id INTEGER, added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id,guild_id))""")
    db_exec("""CREATE TABLE IF NOT EXISTS instructors(user_id INTEGER, guild_id INTEGER, target_users TEXT, added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id,guild_id))""")
    db_exec("""CREATE TABLE IF NOT EXISTS tasks(
        id INTEGER PRIMARY KEY AUTOINCREMENT, guild_id INTEGER, instructor_id INTEGER, assignee_id INTEGER,
        task_name TEXT, due_date TIMESTAMP, status TEXT DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        message_id INTEGER, channel_id INTEGER, reminder_sent INTEGER DEFAULT 0)""")
    cols = db_exec("PRAGMA table_info(tasks)", fetch=True)
    if "reminder_sent" not in [c[1] for c in cols]:
        db_exec("ALTER TABLE tasks ADD COLUMN reminder_sent INTEGER DEFAULT 0")

def is_admin(uid:int,gid:int)->bool: return bool(db_exec("SELECT 1 FROM admins WHERE user_id=? AND guild_id=?", (uid,gid), fetch=True))
def is_instructor(uid:int,gid:int)->bool: return bool(db_exec("SELECT 1 FROM instructors WHERE user_id=? AND guild_id=?", (uid,gid), fetch=True))

def insert_task(gid:int,iid:int,aid:int,name:str,due:datetime)->int:
    db_exec("INSERT INTO tasks (guild_id,instructor_id,assignee_id,task_name,due_date) VALUES (?,?,?,?,?)", (gid,iid,aid,name,due))
    return db_exec("SELECT last_insert_rowid()", fetch=True)[0][0]

def get_task(tid:int):
    r=db_exec("SELECT * FROM tasks WHERE id=?", (tid,), fetch=True)
    return r[0] if r else None

async def ensure_mgmt(guild:discord.Guild)->Optional[discord.TextChannel]:
    for name in ("task-management","タスク管理"):
        ch = discord.utils.get(guild.channels, name=name)
        if isinstance(ch, discord.TextChannel): return ch
    try:
        return await guild.create_text_channel("task-management", overwrites={guild.default_role: discord.PermissionOverwrite(read_messages=False)})
    except Exception as e:
        logger.error(f"mgmt create failed: {e}"); return None

async def ensure_personal(guild:discord.Guild,user:discord.Member)->Optional[discord.TextChannel]:
    name=f"to-{user.display_name}".lower().replace(" ","-")
    ch=discord.utils.get(guild.channels,name=name)
    if isinstance(ch,discord.TextChannel): return ch
    try:
        ow={guild.default_role: discord.PermissionOverwrite(read_messages=False), user: discord.PermissionOverwrite(read_messages=True, send_messages=True)}
        return await guild.create_text_channel(name=name, overwrites=ow, topic=f"{user.display_name} の個人タスク")
    except Exception as e:
        logger.error(f"personal create failed: {e}"); return None

def parse_date(s:str)->Optional[datetime]:
    now=datetime.now(); t=s.strip().lower()
    m=re.search(r'(\d{1,2}):(\d{2})$',t)
    if m: hour,minute=int(m.group(1)),int(m.group(2)); t=t[:m.start()].strip()
    else: hour,minute=23,59
    pats=[(r'^(今日|today)$',lambda m:now),(r'^(明日|tomorrow)$',lambda m:now+timedelta(days=1)),
          (r'^(明後日|day after tomorrow)$',lambda m:now+timedelta(days=2)),(r'^(昨日|yesterday)$',lambda m:now-timedelta(days=1)),
          (r'^(\d+)\s*(日後|days?)$',lambda m:now+timedelta(days=int(m.group(1)))),
          (r'^(\d+)\s*(週間後|weeks?)$',lambda m:now+timedelta(weeks=int(m.group(1)))),
          (r'^(\d+)\s*(時間後|hours?)$',lambda m:now+timedelta(hours=int(m.group(1)))),
          (r'^(\d+)\s*(分後|mins?|minutes?)$',lambda m:now+timedelta(minutes=int(m.group(1)))) ]
    for pat,fn in pats:
        mm=re.match(pat,t)
        if mm: dt=fn(mm); return dt.replace(hour=hour,minute=minute,second=0,microsecond=0)
    wk={'月':0,'火':1,'水':2,'木':3,'金':4,'土':5,'日':6,'monday':0,'tuesday':1,'wednesday':2,'thursday':3,'friday':4,'saturday':5,'sunday':6,'mon':0,'tue':1,'wed':2,'thu':3,'fri':4,'sat':5,'sun':6}
    for name,num in wk.items():
        if name in t:
            d=num-now.weekday(); d+=7 if d<=0 else 0
            return (now+timedelta(days=d)).replace(hour=hour,minute=minute,second=0,microsecond=0)
    abs_p=[r'^(\d{4})[/-](\d{1,2})[/-](\d{1,2})$',r'^(\d{1,2})[/-](\d{1,2})$',r'^(\d{4})年(\d{1,2})月(\d{1,2})日$',r'^(\d{1,2})月(\d{1,2})日$']
    for pat in abs_p:
        mm=re.match(pat,t)
        if mm:
            g=mm.groups()
            if len(g)==3 and len(g[0])==4: y,mo,d=int(g[0]),int(g[1]),int(g[2])
            elif len(g)==3: mo,d,y=int(g[0]),int(g[1]),now.year
            else: mo,d,y=int(g[0]),int(g[1]),now.year
            try: return datetime(y,mo,d,hour,minute)
            except ValueError: return None
    return None

STATUS_COLORS={'pending':discord.Color.red(),'accepted':discord.Color.gold(),'completed':discord.Color.green(),'declined':discord.Color.dark_gray(),'abandoned':discord.Color.dark_red()}
STATUS_EMOJI={'pending':'🟥','accepted':'🟨','completed':'🟩','declined':'⚪','abandoned':'🟫'}
STATUS_NAME={'pending':'Pending','accepted':'In Progress','completed':'Completed','declined':'Declined','abandoned':'Problem'}

def build_embed(trow,status:Optional[str]=None)->discord.Embed:
    st=status or trow[6]
    try: due_ts=int(datetime.fromisoformat(str(trow[5])).timestamp())
    except Exception: due_ts=int(datetime.strptime(str(trow[5]),"%Y-%m-%d %H:%M:%S").timestamp())
    emb=discord.Embed(title=f"📋 {trow[4]}", color=STATUS_COLORS.get(st, discord.Color.blurple()))
    emb.add_field(name="Due Date", value=f"<t:{due_ts}:F>", inline=True)
    emb.add_field(name="Status", value=f"{STATUS_EMOJI.get(st,'⚪')} {STATUS_NAME.get(st,st)}", inline=True)
    emb.add_field(name="Updated", value=f"<t:{int(datetime.now().timestamp())}:R>", inline=True)
    emb.set_footer(text=f"Task ID: {trow[0]}"); return emb

class TaskView(discord.ui.View):
    def __init__(self, tid:int, aid:int, iid:int, status:str):
        super().__init__(timeout=None); self.tid, self.aid, self.iid, self.status=tid,aid,iid,status; self._setup()
    def _setup(self):
        self.clear_items()
        if self.status=='pending': self.add_item(AcceptButton(self.tid)); self.add_item(DeclineButton(self.tid))
        elif self.status=='accepted': self.add_item(CompleteButton(self.tid)); self.add_item(AbandonButton(self.tid))
        elif self.status=='completed': self.add_item(UndoButton(self.tid))

class _BaseBtn(discord.ui.Button):
    def __init__(self,label,style,cid): super().__init__(label=label, style=style, custom_id=cid)
    async def _handle(self,it:discord.Interaction,new_status:str):
        t=db_exec("SELECT * FROM tasks WHERE id=?", (int(self.custom_id.split('_')[-1]),), fetch=True)
        if not t: await it.response.send_message("❌ Task not found.", ephemeral=True); return
        t=t[0]
        if it.user.id!=t[3]: await it.response.send_message("❌ You are not the assignee.", ephemeral=True); return
        db_exec("UPDATE tasks SET status=?, updated_at=CURRENT_TIMESTAMP WHERE id=?", (new_status,t[0]))
        t2=db_exec("SELECT * FROM tasks WHERE id=?", (t[0],), fetch=True)[0]
        await it.response.edit_message(embed=build_embed(t2,new_status), view=TaskView(t2[0],t2[3],t2[2],new_status))

class AcceptButton(_BaseBtn):
    def __init__(self,tid:int): super().__init__("✅ Accept", discord.ButtonStyle.success, f"accept_task_{tid}")
    async def callback(self,it): await self._handle(it,'accepted')
class DeclineButton(_BaseBtn):
    def __init__(self,tid:int): super().__init__("❌ Decline", discord.ButtonStyle.danger, f"decline_task_{tid}")
    async def callback(self,it): await self._handle(it,'declined')
class CompleteButton(_BaseBtn):
    def __init__(self,tid:int): super().__init__("📝 Complete", discord.ButtonStyle.success, f"complete_task_{tid}")
    async def callback(self,it): await self._handle(it,'completed')
class AbandonButton(_BaseBtn):
    def __init__(self,tid:int): super().__init__("⚠️ Problem", discord.ButtonStyle.danger, f"abandon_task_{tid}")
    async def callback(self,it): await self._handle(it,'abandoned')
class UndoButton(_BaseBtn):
    def __init__(self,tid:int): super().__init__("↩️ Undo", discord.ButtonStyle.secondary, f"undo_completion_{tid}")
    async def callback(self,it): await self._handle(it,'accepted')


@bot.event
async def on_ready():
    try:
        logger.info(f'{bot.user} has landed!')
        logger.info(f"Bot is in {len(bot.guilds)} guilds")
    except Exception:
        pass
    # init_database は存在すれば実行
    try:
        init_database()
    except Exception as e:
        try: logger.warning(f"[on_ready] init_database skipped: {e}")
        except Exception: pass
    # 各ギルドでロール作成（存在すれば）
    try:
        for guild in bot.guilds:
            try:
                await setup_roles(guild)
            except Exception as e:
                try: logger.warning(f"[on_ready] setup_roles skipped in {guild.id}: {e}")
                except Exception: pass
    except Exception as e:
        try: logger.warning(f"[on_ready] guild loop skipped: {e}")
        except Exception: pass

@bot.event
async def on_interaction(interaction):
    if interaction.type != discord.InteractionType.component:
        return
    
    custom_id = interaction.data.get('custom_id')
    if not custom_id:
        return
    
    parts = custom_id.split('_')
    if len(parts) < 3:
        return
    
    action = '_'.join(parts[:-1])
    try:
        task_id = int(parts[-1])
    except ValueError:
        return
    
    if action not in ['accept_task', 'decline_task', 'complete_task', 'abandon_task', 'undo_completion']:
        return
    
    try:
        task_data = DatabaseManager.execute_query(
            "SELECT assignee_id, instructor_id, status FROM tasks WHERE id = ?",
            (task_id,)
        )
        
        if not task_data:
            await interaction.response.send_message("❌ タスクが見つかりません。", ephemeral=True)
            return
        
        assignee_id, instructor_id, current_status = task_data[0]
        
        if interaction.user.id != assignee_id:
            await interaction.response.send_message("❌ このタスクの担当者ではありません。", ephemeral=True)
            return
        
        await handle_task_action(interaction, action, task_id, assignee_id, instructor_id, current_status)
        
    except Exception as e:
        logger.error(f"Error handling persistent interaction: {e}")
        try:
            if not interaction.response.is_done():
                await interaction.response.send_message("❌ エラーが発生しました。", ephemeral=True)
            else:
                await interaction.followup.send("❌ エラーが発生しました。", ephemeral=True)
        except:
            pass

# ==== ASSIGN_FALLBACK_V2 (mention or "@name" accepted, with debug) ====
import re as __re, sqlite3 as __sq, discord as __dd, datetime as __dt, asyncio as __aa

@bot.event
async def setup_hook():
    @bot.listen("on_message")
    async def __assign_fallback_v2(message: __dd.Message):
        try:
            if message.author.bot or (message.guild is None):
                return

            text = message.content.strip()

            # 1) 「ボットが実際のメンション」 or 「@ボット名 で始まる」かを判定
            is_real_mention = (bot.user in message.mentions)
            name_variants = [
                f"@{bot.user.display_name}",
                f"@{bot.user.name}",
            ]
            starts_with_name = any(text.startswith(v) for v in name_variants)

            if not (is_real_mention or starts_with_name):
                return  # 他のメッセージは無視

            # 2) 担当者を抽出（実メンションのみ採用）
            assignees = [m for m in message.mentions if m.id != (bot.user.id if is_real_mention else 0)]
            if not assignees:
                await message.reply("❌ 指示対象のユーザーをメンションしてください。")
                return

            # 3) 先頭の @ボット or @ボット名 を取り除く
            if is_real_mention:
                text_wo_head = __re.sub(r'^<@!?%d>\s*' % bot.user.id, '', text).strip()
            else:
                # @リマインダくん / @Remind-kun など名前始まりを取り除く
                head = next(v for v in name_variants if text.startswith(v))
                text_wo_head = text[len(head):].strip()

            # 4) メンション（<@...>）は本文から消してから、残りを「,」で分割
            text_wo_mentions = __re.sub(r'<@!?[0-9]+>', '', text_wo_head).strip()

            # 半角/全角カンマどちらでも最初のカンマを見つける
            m1 = __re.search(r'[，,]', text_wo_mentions)
            if not m1:
                await message.reply("❌ 形式: `@bot @ユーザー, 期日, タスク名`（半角`,`を2つ）")
                return

            rest = text_wo_mentions[m1.end():].strip()
            parts = [p.strip() for p in __re.split(r'[，,]', rest, maxsplit=1)]
            if len(parts) < 2:
                await message.reply("❌ 形式: `@bot @ユーザー, 期日, タスク名`")
                return

            due_str, task_name = parts[0], parts[1]
            if not task_name:
                await message.reply("❌ タスク名が空です。")
                return

            # 5) 期日パース（既存の parse_date を使用）
            try:
                due_dt = parse_date(due_str)
            except Exception:
                due_dt = None
            if not due_dt:
                await message.reply("❌ 期日が読めませんでした。例: 明日 18:00 / 3日後 / 金曜 14:30 / 2025/08/23 09:00")
                return

            # 6) 追加 & 個人CH通知（thread_id も保存）
            created = 0
            for target in assignees:
                # DB INSERT（同一接続で lastrowid 取得）
                try:
                    conn = __sq.connect('reminder_bot.db'); cur = conn.cursor()
                    cur.execute(
                        "INSERT INTO tasks (guild_id,instructor_id,assignee_id,task_name,due_date,message_id,channel_id) "
                        "VALUES (?,?,?,?,?,?,?)",
                        (message.guild.id, message.author.id, target.id, task_name, due_dt, message.id, message.channel.id)
                    )
                    tid = cur.lastrowid
                    conn.commit(); conn.close()
                except Exception as e:
                    try: conn.close()
                    except: pass
                    await message.reply(f"❌ {target.display_name}: DBエラー")
                    continue

                ch_name = f"to-{target.display_name}"
                ch = __dd.utils.get(message.guild.channels, name=ch_name)
                if not ch:
                    try:
                        ow = {
                            message.guild.default_role: __dd.PermissionOverwrite(read_messages=False),
                            target: __dd.PermissionOverwrite(read_messages=True, send_messages=True)
                        }
                        ch = await message.guild.create_text_channel(ch_name, overwrites=ow, topic=f"{target.display_name}の個人タスク管理チャンネル")
                        intro = __dd.Embed(title="📋 個人タスクチャンネル",
                                           description=f"こんにちは、{target.display_name}さん！\nこのチャンネルでタスクの通知を受け取ります。",
                                           color=__dd.Color.blue())
                        await ch.send(embed=intro)
                    except Exception:
                        try: ch = await target.create_dm()
                        except Exception: ch = None

                if ch:
                    emb = __dd.Embed(title=f"📋 {task_name}",
                                     description=f"**期日: {due_dt.strftime('%Y/%m/%d %H:%M')}**",
                                     color=__dd.Color.gold())
                    try:
                        view = TaskView(tid, target.id, message.author.id, "pending")
                    except Exception:
                        view = None

                    try:
                        main_msg = await ch.send(target.mention, embed=emb, view=view)
                        try:
                            th = await main_msg.create_thread(name=f"🟥 {task_name} - 詳細", auto_archive_duration=60, reason="タスク詳細")
                            det = __dd.Embed(title="📋 タスク詳細", color=__dd.Color.blue())
                            det.add_field(name="指示者", value=message.author.mention, inline=True)
                            det.add_field(name="状態", value="🟥 未受託", inline=True)
                            det.add_field(name="作成日時", value=__dt.datetime.now().strftime("%Y/%m/%d %H:%M"), inline=True)
                            if view is not None:
                                await th.send(embed=det, view=TaskView(tid, target.id, message.author.id, "pending"))
                            else:
                                await th.send(embed=det)
                            # 保存
                            try:
                                conn = __sq.connect('reminder_bot.db'); cur = conn.cursor()
                                cur.execute("UPDATE tasks SET thread_id=?, message_id=? WHERE id=?", (th.id, main_msg.id, tid))
                                conn.commit(); conn.close()
                            except Exception:
                                pass
                        except Exception:
                            pass
                    except Exception:
                        pass

                created += 1

            await message.reply(f"✅ {created}件のタスクを指示しました。" if created else "❌ 作成に失敗しました。")
        except Exception as e:
            try:
                await message.reply(f"❌ 解析中エラー: {e}")
            except Exception:
                pass
    logger.info("[assign] fallback_v2 installed via setup_hook")
# ==== /ASSIGN_FALLBACK_V2 ====

# ==== ASSIGN_FALLBACK_V2 (mention or "@name" accepted, with debug) ====
import re as __re, sqlite3 as __sq, discord as __dd, datetime as __dt, asyncio as __aa

@bot.event
async def setup_hook():
    @bot.listen("on_message")
    async def __assign_fallback_v2(message: __dd.Message):
        try:
            if message.author.bot or (message.guild is None):
                return

            text = message.content.strip()

            # 1) 「ボットが実際のメンション」 or 「@ボット名 で始まる」かを判定
            is_real_mention = (bot.user in message.mentions)
            name_variants = [
                f"@{bot.user.display_name}",
                f"@{bot.user.name}",
            ]
            starts_with_name = any(text.startswith(v) for v in name_variants)

            if not (is_real_mention or starts_with_name):
                return  # 他のメッセージは無視

            # 2) 担当者を抽出（実メンションのみ採用）
            assignees = [m for m in message.mentions if m.id != (bot.user.id if is_real_mention else 0)]
            if not assignees:
                await message.reply("❌ 指示対象のユーザーをメンションしてください。")
                return

            # 3) 先頭の @ボット or @ボット名 を取り除く
            if is_real_mention:
                text_wo_head = __re.sub(r'^<@!?%d>\s*' % bot.user.id, '', text).strip()
            else:
                # @リマインダくん / @Remind-kun など名前始まりを取り除く
                head = next(v for v in name_variants if text.startswith(v))
                text_wo_head = text[len(head):].strip()

            # 4) メンション（<@...>）は本文から消してから、残りを「,」で分割
            text_wo_mentions = __re.sub(r'<@!?[0-9]+>', '', text_wo_head).strip()

            # 半角/全角カンマどちらでも最初のカンマを見つける
            m1 = __re.search(r'[，,]', text_wo_mentions)
            if not m1:
                await message.reply("❌ 形式: `@bot @ユーザー, 期日, タスク名`（半角`,`を2つ）")
                return

            rest = text_wo_mentions[m1.end():].strip()
            parts = [p.strip() for p in __re.split(r'[，,]', rest, maxsplit=1)]
            if len(parts) < 2:
                await message.reply("❌ 形式: `@bot @ユーザー, 期日, タスク名`")
                return

            due_str, task_name = parts[0], parts[1]
            if not task_name:
                await message.reply("❌ タスク名が空です。")
                return

            # 5) 期日パース（既存の parse_date を使用）
            try:
                due_dt = parse_date(due_str)
            except Exception:
                due_dt = None
            if not due_dt:
                await message.reply("❌ 期日が読めませんでした。例: 明日 18:00 / 3日後 / 金曜 14:30 / 2025/08/23 09:00")
                return

            # 6) 追加 & 個人CH通知（thread_id も保存）
            created = 0
            for target in assignees:
                # DB INSERT（同一接続で lastrowid 取得）
                try:
                    conn = __sq.connect('reminder_bot.db'); cur = conn.cursor()
                    cur.execute(
                        "INSERT INTO tasks (guild_id,instructor_id,assignee_id,task_name,due_date,message_id,channel_id) "
                        "VALUES (?,?,?,?,?,?,?)",
                        (message.guild.id, message.author.id, target.id, task_name, due_dt, message.id, message.channel.id)
                    )
                    tid = cur.lastrowid
                    conn.commit(); conn.close()
                except Exception as e:
                    try: conn.close()
                    except: pass
                    await message.reply(f"❌ {target.display_name}: DBエラー")
                    continue

                ch_name = f"to-{target.display_name}"
                ch = __dd.utils.get(message.guild.channels, name=ch_name)
                if not ch:
                    try:
                        ow = {
                            message.guild.default_role: __dd.PermissionOverwrite(read_messages=False),
                            target: __dd.PermissionOverwrite(read_messages=True, send_messages=True)
                        }
                        ch = await message.guild.create_text_channel(ch_name, overwrites=ow, topic=f"{target.display_name}の個人タスク管理チャンネル")
                        intro = __dd.Embed(title="📋 個人タスクチャンネル",
                                           description=f"こんにちは、{target.display_name}さん！\nこのチャンネルでタスクの通知を受け取ります。",
                                           color=__dd.Color.blue())
                        await ch.send(embed=intro)
                    except Exception:
                        try: ch = await target.create_dm()
                        except Exception: ch = None

                if ch:
                    emb = __dd.Embed(title=f"📋 {task_name}",
                                     description=f"**期日: {due_dt.strftime('%Y/%m/%d %H:%M')}**",
                                     color=__dd.Color.gold())
                    try:
                        view = TaskView(tid, target.id, message.author.id, "pending")
                    except Exception:
                        view = None

                    try:
                        main_msg = await ch.send(target.mention, embed=emb, view=view)
                        try:
                            th = await main_msg.create_thread(name=f"🟥 {task_name} - 詳細", auto_archive_duration=60, reason="タスク詳細")
                            det = __dd.Embed(title="📋 タスク詳細", color=__dd.Color.blue())
                            det.add_field(name="指示者", value=message.author.mention, inline=True)
                            det.add_field(name="状態", value="🟥 未受託", inline=True)
                            det.add_field(name="作成日時", value=__dt.datetime.now().strftime("%Y/%m/%d %H:%M"), inline=True)
                            if view is not None:
                                await th.send(embed=det, view=TaskView(tid, target.id, message.author.id, "pending"))
                            else:
                                await th.send(embed=det)
                            # 保存
                            try:
                                conn = __sq.connect('reminder_bot.db'); cur = conn.cursor()
                                cur.execute("UPDATE tasks SET thread_id=?, message_id=? WHERE id=?", (th.id, main_msg.id, tid))
                                conn.commit(); conn.close()
                            except Exception:
                                pass
                        except Exception:
                            pass
                    except Exception:
                        pass

                created += 1

            await message.reply(f"✅ {created}件のタスクを指示しました。" if created else "❌ 作成に失敗しました。")
        except Exception as e:
            try:
                await message.reply(f"❌ 解析中エラー: {e}")
            except Exception:
                pass
    logger.info("[assign] fallback_v2 installed via setup_hook")
# ==== /ASSIGN_FALLBACK_V2 ====

# ==== COLOR_COMMANDS_INSTALL (register commands via setup_hook) ====
import sqlite3 as _sq, discord as _dd
from discord.ext import tasks, commands as _cmds

def _emoji_from_status(st): 
    return {"pending":"🟥","accepted":"🟨","completed":"🟩","abandoned":"⚠️","declined":"❌"}.get(st, "⚪")

async def _rename_thread_to_status(thread: _dd.Thread, status: str):
    try:
        if not isinstance(thread, _dd.Thread): return False
        em=_emoji_from_status(status); cur=thread.name or ""
        for e in ("🟥","🟨","🟩","⚠️","❌","⚪"):
            if cur.startswith(e): new=em+cur[len(e):]; break
        else: new=f"{em} {cur}"
        new=new.lstrip()
        if new!=cur: await thread.edit(name=new)
        return True
    except Exception as e:
        try: logger.warning(f"[color] rename failed: {e}")
        except: pass
        return False

# 監視ループ（無ければ）
if "color_enforcer" not in globals():
    @tasks.loop(seconds=15)
    async def color_enforcer():
        try:
            conn=_sq.connect('reminder_bot.db'); cur=conn.cursor()
            cur.execute("""SELECT thread_id,status FROM tasks 
                           WHERE thread_id IS NOT NULL 
                           ORDER BY updated_at DESC, id DESC LIMIT 50""")
            rows=cur.fetchall(); conn.close()
        except Exception as e:
            try: logger.error(f"[color] DB: {e}")
            except: pass
            return
        for thread_id, status in rows:
            ch=bot.get_channel(thread_id)
            if not isinstance(ch,_dd.Thread):
                try: ch=await bot.fetch_channel(thread_id)
                except Exception: continue
            await _rename_thread_to_status(ch, status or "pending")

    @color_enforcer.before_loop
    async def _enf_wait(): 
        await bot.wait_until_ready()

# setup_hook で確実にコマンド登録
_old_setup_hook = getattr(bot, "setup_hook", None)
@bot.event
async def setup_hook():
    if callable(_old_setup_hook):
        try: await _old_setup_hook()
        except TypeError: pass  # 互換

    # !色直す
    async def _fixcolor(ctx):
        if not isinstance(ctx.channel, _dd.Thread):
            await ctx.reply("このコマンドは**スレッドの中**で実行してください。"); return
        try:
            conn=_sq.connect('reminder_bot.db'); cur=conn.cursor()
            cur.execute("SELECT status FROM tasks WHERE thread_id=?", (ctx.channel.id,))
            row=cur.fetchone(); conn.close()
            if not row:
                await ctx.reply("このスレッドのタスクが見つかりません。"); return
            await _rename_thread_to_status(ctx.channel, row[0] or "pending")
            await ctx.reply(f"同期しました: {row[0]}")
        except Exception as e:
            try: logger.error(f"[fixcolor] {e}", exc_info=True)
            except: pass
            await ctx.reply("エラーが発生しました。")

    # !色監視オン / !色監視オフ
    async def _start_enf(ctx):
        if not color_enforcer.is_running():
            color_enforcer.start(); await ctx.reply("色同期の常駐を**開始**しました。")
        else: await ctx.reply("色同期はすでに動作中です。")
    async def _stop_enf(ctx):
        if color_enforcer.is_running():
            color_enforcer.cancel(); await ctx.reply("色同期の常駐を**停止**しました。")
        else: await ctx.reply("色同期は停止中です。")

    # 既に同名があれば上書き
    for cmd_name in ("色直す","fixcolor","色監視オン","色監視オフ"):
        try: bot.remove_command(cmd_name)
        except Exception: pass

    bot.add_command(_cmds.Command(_fixcolor, name="色直す", aliases=["fixcolor"]))
    bot.add_command(_cmds.Command(_start_enf, name="色監視オン"))
    bot.add_command(_cmds.Command(_stop_enf,  name="色監視オフ"))
    try: logger.info("[color] commands registered via setup_hook")
    except Exception: pass
# ==== /COLOR_COMMANDS_INSTALL ====

# ==== JP_EMBED_LOCALIZE v2 ====
import discord as _d

_JP_LABEL = {
    "Due Date": "期日",
    "Due":      "期日",
    "Status":   "状態",
    "Updated":  "更新",
    "Update":   "更新",
}
_JP_STATUS = {
    "Pending":     "未受託",
    "In Progress": "受託",
    "Accepted":    "受託",
    "Completed":   "完了",
    "Declined":    "辞退",
    "Problem":     "問題",
    "Abandoned":   "問題発生",
}

def _jp_build_localized(emb:_d.Embed, hide_task_id:bool=True)->_d.Embed:
    # 基本情報を引き継いで、新しいEmbedを作り直す（不要なTask IDもここで除去）
    new = _d.Embed(
        title=emb.title, description=emb.description, color=emb.color
    )
    new.url = emb.url
    new.timestamp = emb.timestamp
    if emb.author and emb.author.name:
        new.set_author(name=emb.author.name, url=emb.author.url if emb.author.url else _d.utils.MISSING, icon_url=emb.author.icon_url if emb.author.icon_url else _d.utils.MISSING)
    if emb.footer and emb.footer.text:
        new.set_footer(text=emb.footer.text, icon_url=emb.footer.icon_url if emb.footer.icon_url else _d.utils.MISSING)
    if emb.thumbnail and emb.thumbnail.url:
        new.set_thumbnail(url=emb.thumbnail.url)
    if emb.image and emb.image.url:
        new.set_image(url=emb.image.url)

    for f in emb.fields:
        name = str(f.name).strip()
        value = str(f.value)
        if hide_task_id and name in ("Task ID", "TaskID", "タスクID"):
            continue
        name_jp = _JP_LABEL.get(name, name)
        if name_jp == "状態":
            value = _JP_STATUS.get(value.strip(), value)
        new.add_field(name=name_jp, value=value, inline=f.inline)
    return new

# Botが送った埋め込みを自動で日本語化
@bot.listen("on_message")
async def _jp_auto_localize(msg:_d.Message):
    try:
        if msg.author.id != (bot.user.id if bot.user else 0):
            return
        if not msg.embeds:
            return
        emb = msg.embeds[0]
        loc = _jp_build_localized(emb, hide_task_id=True)
        # 変化がある場合のみ更新（無駄なPATCHを避ける）
        if (emb.fields != loc.fields) or (emb.title != loc.title) or (emb.description != loc.description):
            await msg.edit(embed=loc)
    except Exception:
        pass

# 手動一括：直近のBotメッセージを日本語化（現在のチャンネル）
@bot.command(name="日本語化", aliases=["jp"])
async def cmd_jp(ctx, 件数:int=30):
    try:
        件数 = max(1, min(件数, 200))
        n = 0
        async for m in ctx.channel.history(limit=件数):
            if m.author.id == (bot.user.id if bot.user else 0) and m.embeds:
                loc = _jp_build_localized(m.embeds[0], hide_task_id=True)
                await m.edit(embed=loc)
                n += 1
        await ctx.reply(f"日本語化しました：{n}件")
    except Exception as e:
        await ctx.reply("日本語化中にエラーが発生しました。")
# ==== /JP_EMBED_LOCALIZE v2 ====

# ==== DISPLAY_AND_RENAME_AND_NOTIFY ====
import sqlite3 as __sq, discord as __dd, asyncio as __aio
from datetime import datetime as __dt

# --- 設定（DBに保存） ---
def __cfg_exec(sql, params=(), fetch=False):
    conn=__sq.connect('reminder_bot.db'); cur=conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS settings(key TEXT PRIMARY KEY, val TEXT)")
    cur.execute(sql, params)
    rows=cur.fetchall() if fetch else None
    conn.commit(); conn.close()
    return rows

def get_display_mode()->str:
    try:
        r=__cfg_exec("SELECT val FROM settings WHERE key='display_mode'", fetch=True)
        return (r[0][0] if r else "jp")
    except Exception:
        return "jp"

def set_display_mode(mode:str):
    mode = "num" if mode.lower().startswith("num") or mode.startswith("数字") else "jp"
    __cfg_exec("INSERT INTO settings(key,val) VALUES('display_mode',?) "
               "ON CONFLICT(key) DO UPDATE SET val=excluded.val", (mode,))
    return mode

# --- 日付文字列の整形（数字/日本語） ---
__JP_WD = "月火水木金土日"
def fmt_due(due)->str:
    # due は ISO 文字列 or datetime or 既存文字列
    try:
        if isinstance(due, str):
            try:
                d = __dt.fromisoformat(due.replace("Z","+00:00")).replace(tzinfo=None)
            except Exception:
                return due
        elif isinstance(due, __dt):
            d = due
        else:
            return str(due)
        if get_display_mode()=="num":
            return d.strftime("%Y/%m/%d %H:%M")
        else:
            wd = __JP_WD[d.weekday()]
            return d.strftime(f"%Y年%m月%d日（{wd}） %H:%M")
    except Exception:
        return str(due)

# --- 状態の日本語化（ラベルは固定で日本語） ---
def jp_status_name(st:str)->str:
    m = {
        "pending":"未受託","accepted":"受託","completed":"完了",
        "declined":"辞退","abandoned":"問題発生",
        "In Progress":"受託","Accepted":"受託","Completed":"完了",
        "Pending":"未受託","Declined":"辞退","Problem":"問題"
    }
    return m.get((st or "").strip(), st)

# --- 個人チャンネル取得/作成 ---
async def get_personal_channel(guild:__dd.Guild, user:__dd.Member):
    name=f"to-{user.display_name}"
    ch=__dd.utils.get(guild.channels, name=name)
    if ch: return ch
    try:
        ow={guild.default_role:__dd.PermissionOverwrite(read_messages=False),
            user:__dd.PermissionOverwrite(read_messages=True, send_messages=True)}
        return await guild.create_text_channel(name, overwrites=ow, topic=f"{user.display_name}の個人タスク管理チャンネル")
    except Exception:
        try: return await user.create_dm()
        except Exception: return None

# --- 先頭絵文字（🟥🟨🟩⚠️❌） ---
def status_emoji(st:str)->str:
    return {"pending":"🟥","accepted":"🟨","completed":"🟩","abandoned":"⚠️","declined":"❌"}.get(st, "⚪")

# --- スレッド名を状態に合わせて更新 ---
async def rename_thread_by_status(thread:__dd.Thread, status:str):
    if not isinstance(thread, __dd.Thread): return
    cur = thread.name or ""
    em  = status_emoji(status)
    # 置換／付与
    for e in ("🟥","🟨","🟩","⚠️","❌","⚪"):
        if cur.startswith(e): new = em + cur[len(e):]; break
    else: new = f"{em} {cur}"
    new=new.lstrip()
    if new!=cur:
        await thread.edit(name=new)

# --- アクション→状態 ---
def desired_from_action(action:str, db_status:str)->str:
    m = {"accept_task":"accepted","complete_task":"completed",
         "undo_completion":"accepted","abandon_task":"abandoned",
         "decline_task":"declined"}
    return m.get(action, db_status or "pending")

# --- 指示者通知 ---
async def notify_instructor(guild:__dd.Guild, instructor_id:int, assignee_id:int, task_name:str, status:str, due):
    inst = guild.get_member(instructor_id)
    if not inst: return
    ch = await get_personal_channel(guild, inst)
    if not ch: 
        try: await inst.send(embed=emb); return
        except Exception: return
    emb = __dd.Embed(title="📣 タスク更新", color=__dd.Color.blue())
    emb.add_field(name="タスク", value=task_name, inline=False)
    emb.add_field(name="状態", value=jp_status_name(status), inline=True)
    emb.add_field(name="期日", value=fmt_due(due), inline=True)
    emb.add_field(name="担当", value=f"<@{assignee_id}>", inline=True)
    await ch.send(embed=emb)

# --- on_interaction で：スレッド名更新＋指示者通知（DBは触らない） ---
@bot.event
async def setup_hook():
    @bot.listen("on_interaction")
    async def __link_rename_notify(inter:__dd.Interaction):
        try:
            if inter.type != __dd.InteractionType.component: return
            data = inter.data or {}; cid = data.get("custom_id") or ""
            # custom_id: accept_task_123 など
            import re as __re
            m=__re.match(r'^(accept_task|complete_task|undo_completion|abandon_task|decline_task)_(\d+)$', cid)
            if not m: return
            action, tid = m.group(1), int(m.group(2))

            # 元の処理が終わるまで少し待機（Embed/DB更新の競合回避）
            await __aio.sleep(0.30)

            # DBから instructor/assignee/task_name/due/status/thread_id を取得
            try:
                conn=__sq.connect('reminder_bot.db'); cur=conn.cursor()
                cur.execute("SELECT instructor_id,assignee_id,task_name,due_date,status,thread_id FROM tasks WHERE id=?", (tid,))
                row=cur.fetchone(); conn.close()
                if not row: return
                instructor_id, assignee_id, task_name, due, db_status, thread_id = row
            except Exception:
                return

            # 対象スレッドを取得（thread_id優先→文脈から補完）
            thread=None
            if thread_id:
                thread = inter.client.get_channel(thread_id)
                if not isinstance(thread, __dd.Thread):
                    try: thread = await inter.client.fetch_channel(thread_id)
                    except Exception: thread=None
            if not isinstance(thread, __dd.Thread):
                thread = inter.message.channel if isinstance(inter.message.channel, __dd.Thread) else getattr(inter.message, "thread", None)

            # 望ましい状態（action優先）
            new_status = desired_from_action(action, db_status)

            # 1) スレッド名更新
            if isinstance(thread, __dd.Thread):
                await rename_thread_by_status(thread, new_status)

            # 2) 指示者へ通知（個人チャンネルが無ければDM）
            if inter.guild:
                await notify_instructor(inter.guild, instructor_id, assignee_id, task_name, new_status, due)
        except Exception as e:
            try: logger.error(f"[rename_notify] {e}", exc_info=True)
            except: pass

    # 表示形式の切替コマンド： !表示 日本語 / 数字 / 確認
    @bot.command(name="表示")
    async def cmd_display(ctx, モード:str="確認"):
        try:
            if モード in ("確認","status","check"):
                cur = get_display_mode()
                await ctx.reply(f"現在の表示: **{'日本語' if cur=='jp' else '数字'}**")
                return
            mode = set_display_mode(モード)
            await ctx.reply(f"表示を **{'日本語' if mode=='jp' else '数字'}** に切り替えました。")
        except Exception as e:
            await ctx.reply("表示設定の更新に失敗しました。")
# ==== /DISPLAY_AND_RENAME_AND_NOTIFY ====

# ==== SAFE_ON_MESSAGE ====
# 既存の on_message を呼んだ上で、"!" で始まる時だけ commands を動かす
_old_on_message = getattr(bot, "on_message", None)

@bot.event
async def on_message(message):
    # 先に既存の on_message を通す（assign_fallback などのリスナーは bot.listen なので自動で呼ばれます）
    if callable(_old_on_message):
        try:
            await _old_on_message(message)
        except TypeError:
            pass

    # Bot自身/他Botは無視
    if message.author.bot:
        return

    # "!" で始まるメッセージだけコマンドとして解釈
    if message.content.lstrip().startswith('!'):
        await bot.process_commands(message)
# ==== /SAFE_ON_MESSAGE ====

# ==== PROCESS_GUARD (process_commands を ! 先頭だけに制限) ====
import asyncio as __a
if not hasattr(bot, "_orig_process_commands"):
    bot._orig_process_commands = bot.process_commands

    async def _guarded_process_commands(message):
        # Bot自身/他Botを無視
        if getattr(message, "author", None) and getattr(message.author, "bot", False):
            return
        # 先頭が ! の時だけコマンドとして処理
        content = (message.content or "").lstrip()
        if not content.startswith("!"):
            return
        await bot._orig_process_commands(message)

    bot.process_commands = _guarded_process_commands
# ==== /PROCESS_GUARD ====

# ==== PROBE_ON_MESSAGE ====
@bot.listen("on_message")
async def __probe_om(msg):
    try:
        if msg.author.bot: return
        content = (msg.content or "")
        logger.info(f"[probe] g={getattr(msg.guild,'id',None)} ch={getattr(msg.channel,'id',None)} len={len(content)} bang={bool(content.lstrip().startswith('!'))} mentionBot={bot.user in msg.mentions}")
    except Exception:
        pass
# ==== /PROBE_ON_MESSAGE ====

# ==== PROCESS_GUARD_FINAL ====
if not hasattr(bot, "_orig_process_commands"):
    bot._orig_process_commands = bot.process_commands
    async def _guarded(message):
        if getattr(message.author,'bot',False): return
        content=(message.content or "").lstrip()
        if not content.startswith('!'): return
        await bot._orig_process_commands(message)
    bot.process_commands = _guarded
# ==== /PROCESS_GUARD_FINAL ====

# ==== SLASH_ASSIGN ====
import discord as __d
from discord import app_commands as __ac
import sqlite3 as __sq

# 期日パースは既存の parse_date を使う前提（無い場合は "明日 18:00" 等だけで十分）
@__ac.command(name="指示", description="担当者にタスクを指示します")
@__ac.describe(担当者="担当者を選択", 期日="例: 明日 18:00 / 3日後 / 金曜 14:30 / 2025/09/01 09:00", タスク名="タスクのタイトル")
async def slash_assign(inter: __d.Interaction, 担当者: __d.Member, 期日: str, タスク名: str):
    try:
        # 期日
        try:
            due = parse_date(期日)
        except Exception:
            due = None
        if not due:
            await inter.response.send_message("❌ 期日が読めませんでした。例: 明日 18:00 / 3日後 / 金曜 14:30 / 2025/09/01 09:00", ephemeral=True)
            return

        # DB INSERT（lastrowid 取得）
        try:
            conn=__sq.connect('reminder_bot.db'); cur=conn.cursor()
            cur.execute(
                "INSERT INTO tasks (guild_id,instructor_id,assignee_id,task_name,due_date,message_id,channel_id) "
                "VALUES (?,?,?,?,?,?,?)",
                (inter.guild.id, inter.user.id, 担当者.id, タスク名, due, 0, 0)
            )
            tid=cur.lastrowid
            conn.commit(); conn.close()
        except Exception as e:
            try: conn.close()
            except: pass
            await inter.response.send_message("❌ DBエラーで作成できませんでした。", ephemeral=True)
            return

        # 個人CH通知（既存の関数があれば使用）
        try:
            # 既にあなたの環境にある send_task_notification を使う（thread作成・button等）
            await send_task_notification(inter.guild, 担当者, inter.user, タスク名, due, 0, task_id=tid)
        except Exception as e:
            # フォールバック通知（最低限）
            ch = __d.utils.get(inter.guild.channels, name=f"to-{担当者.display_name}")
            if not ch:
                try:
                    ow={inter.guild.default_role:__d.PermissionOverwrite(read_messages=False),
                        担当者:__d.PermissionOverwrite(read_messages=True, send_messages=True)}
                    ch=await inter.guild.create_text_channel(f"to-{担当者.display_name}", overwrites=ow,
                                                             topic=f"{担当者.display_name}の個人タスク管理チャンネル")
                except Exception:
                    try: ch=await 担当者.create_dm()
                    except: ch=None
            if ch:
                emb=__d.Embed(title=f"📋 {タスク名}",
                               description=f"**期日: {due.strftime('%Y/%m/%d %H:%M')}**",
                               color=__d.Color.gold())
                await ch.send(担当者.mention, embed=emb)

        # 送信者にも結果を返す
        await inter.response.send_message(f"✅ 指示しました：**{担当者.display_name}** / {タスク名}（期日: {due.strftime('%Y/%m/%d %H:%M')}）", ephemeral=True)
    except Exception as e:
        try:
            await inter.response.send_message("❌ 実行中にエラーが発生しました。", ephemeral=True)
        except Exception:
            pass

# setup_hookで登録＆同期
_old_setup_hook = getattr(bot, "setup_hook", None)
@bot.event
async def setup_hook():
    if callable(_old_setup_hook):
        try: await _old_setup_hook()
        except TypeError: pass
    try:
        bot.tree.add_command(slash_assign)
        await bot.tree.sync()
        logger.info("[slash] /指示 を登録しました")
    except Exception as e:
        try: logger.error(f"[slash] 登録失敗: {e}", exc_info=True)
        except Exception: pass
# ==== /SLASH_ASSIGN ====

# ==== SLASH_ASSIGN (確実登録 + ギルド即時同期) ====
import discord as _d
from discord import app_commands as _ac
import sqlite3 as _sq

@_ac.command(name="指示", description="担当者にタスクを指示します")
@_ac.describe(担当者="担当者を選択", 期日="例: 明日 18:00 / 3日後 / 金曜 14:30 / 2025/09/01 09:00", タスク名="タスクのタイトル")
async def 指示(inter: _d.Interaction, 担当者: _d.Member, 期日: str, タスク名: str):
    try:
        # 期日を既存パーサで
        try:
            due = parse_date(期日)
        except Exception:
            due = None
        if not due:
            await inter.response.send_message("❌ 期日が読めませんでした。\n例：明日 18:00 / 3日後 / 金曜 14:30 / 2025/09/01 09:00", ephemeral=True)
            return

        # DB登録（lastrowid）
        try:
            conn=_sq.connect('reminder_bot.db'); cur=conn.cursor()
            cur.execute(
                "INSERT INTO tasks (guild_id,instructor_id,assignee_id,task_name,due_date,message_id,channel_id) "
                "VALUES (?,?,?,?,?,?,?)",
                (inter.guild.id, inter.user.id, 担当者.id, タスク名, due, 0, 0)
            )
            tid=cur.lastrowid
            conn.commit(); conn.close()
        except Exception:
            try: conn.close()
            except: pass
            await inter.response.send_message("❌ DBエラーで作成できませんでした。", ephemeral=True)
            return

        # 個人CH通知（既存関数があれば利用）
        try:
            await send_task_notification(inter.guild, 担当者, inter.user, タスク名, due, 0, task_id=tid)
        except Exception:
            # 最低限のフォールバック通知
            ch = _d.utils.get(inter.guild.channels, name=f"to-{担当者.display_name}")
            if not ch:
                try:
                    ow={inter.guild.default_role:_d.PermissionOverwrite(read_messages=False),
                        担当者:_d.PermissionOverwrite(read_messages=True, send_messages=True)}
                    ch=await inter.guild.create_text_channel(f"to-{担当者.display_name}", overwrites=ow,
                                                             topic=f"{担当者.display_name}の個人タスク管理チャンネル")
                except Exception:
                    try: ch=await 担当者.create_dm()
                    except: ch=None
            if ch:
                emb=_d.Embed(title=f"📋 {タスク名}",
                              description=f"**期日: {due.strftime('%Y/%m/%d %H:%M')}**",
                              color=_d.Color.gold())
                await ch.send(担当者.mention, embed=emb)

        await inter.response.send_message(
            f"✅ 指示しました：**{担当者.display_name}** / {タスク名}（期日: {due.strftime('%Y/%m/%d %H:%M')}）",
            ephemeral=True
        )
    except Exception as e:
        try: await inter.response.send_message("❌ 実行中にエラーが発生しました。", ephemeral=True)
        except Exception: pass

# 既存 setup_hook があっても共存させ、全参加サーバーに即時同期
_old_setup_hook = getattr(bot, "setup_hook", None)
@bot.event
async def setup_hook():
    if callable(_old_setup_hook):
        try: await _old_setup_hook()
        except TypeError: pass

    # コマンドをツリーに追加（重複ならOK）
    try:
        try: bot.tree.add_command(指示)
        except Exception: pass

        # 参加している各サーバーにギルド同期（グローバル待ち時間を回避）
        ok=0
        for g in bot.guilds:
            try:
                await bot.tree.sync(guild=_d.Object(id=g.id))
                ok+=1
            except Exception as e:
                try: logger.warning(f"[slash] sync failed in {g.id}: {e}")
                except Exception: pass
        try: logger.info(f"[slash] /指示 を {ok} guild(s) に同期しました")
        except Exception: pass
    except Exception as e:
        try: logger.error(f"[slash] 登録失敗: {e}", exc_info=True)
        except Exception: pass

# 管理者向け：手動同期（/指示が出ない時の救済）
@bot.command(name="sync")
@commands.has_permissions(administrator=True)
async def cmd_sync(ctx):
    try:
        cnt=0
        for g in bot.guilds:
            await bot.tree.sync(guild=_d.Object(id=g.id)); cnt+=1
        await ctx.reply(f"Slashコマンドを同期しました（{cnt} guild）")
    except Exception as e:
        await ctx.reply(f"同期に失敗しました：{e}")
# ==== /SLASH_ASSIGN ====

# ==== TEXT_SLASH_ASSIGN_FALLBACK ====
import re as __re, discord as __d, sqlite3 as __sq, datetime as __dt

@bot.listen("on_message")
async def __text_slash_assign(msg: __d.Message):
    """
    文字で `/指示 担当者:@〇〇 期日:"…" タスク名:"…"` と書かれたメッセージを解析して実行。
    例: /指示 担当者:@山田 期日:"明日 18:00" タスク名:"レポート提出"
    """
    try:
        if msg.author.bot or (msg.guild is None):
            return
        t = (msg.content or "").strip()
        if not t.startswith("/指示"):
            return

        # 担当者はメンションから拾う（最初のユーザー）
        assignees = [m for m in msg.mentions if m.id != (bot.user.id if bot.user else 0)]
        if not assignees:
            await msg.reply("❌ 担当者を @メンション してください。\n例）/指示 担当者:@山田 期日:\"明日 18:00\" タスク名:\"レポート提出\"")
            return
        assignee = assignees[0]

        # 期日・タスク名は 日本語キー + 二重引用符 で抜き出す
        m_due  = __re.search(r'期日\s*[:：]\s*"([^"]+)"', t)
        m_task = __re.search(r'タスク名\s*[:：]\s*"([^"]+)"', t)
        if not (m_due and m_task):
            await msg.reply("❌ 形式が不正です。\n例）/指示 担当者:@山田 期日:\"明日 18:00\" タスク名:\"レポート提出\"")
            return
        due_str  = m_due.group(1).strip()
        task_name = m_task.group(1).strip()

        # 期日パース（既存の parse_date を使用）
        try:
            due = parse_date(due_str)
        except Exception:
            due = None
        if not due:
            await msg.reply("❌ 期日が読めませんでした。例：明日 18:00 / 3日後 / 金曜 14:30 / 2025/09/01 09:00")
            return

        # DB INSERT（lastrowid を取得）
        try:
            conn = __sq.connect('reminder_bot.db'); cur = conn.cursor()
            cur.execute(
                "INSERT INTO tasks (guild_id,instructor_id,assignee_id,task_name,due_date,message_id,channel_id) "
                "VALUES (?,?,?,?,?,?,?)",
                (msg.guild.id, msg.author.id, assignee.id, task_name, due, msg.id, msg.channel.id)
            )
            tid = cur.lastrowid
            conn.commit(); conn.close()
        except Exception as e:
            try: conn.close()
            except: pass
            await msg.reply("❌ DBエラーで作成できませんでした。")
            return

        # 個人チャンネル通知（既存の send_task_notification があれば使う）
        try:
            await send_task_notification(msg.guild, assignee, msg.author, task_name, due, msg.id, task_id=tid)
        except Exception:
            # フォールバック（最低限の通知）
            ch = __d.utils.get(msg.guild.channels, name=f"to-{assignee.display_name}")
            if not ch:
                try:
                    ow={msg.guild.default_role:__d.PermissionOverwrite(read_messages=False),
                        assignee:__d.PermissionOverwrite(read_messages=True, send_messages=True)}
                    ch = await msg.guild.create_text_channel(f"to-{assignee.display_name}", overwrites=ow,
                                                             topic=f"{assignee.display_name}の個人タスク管理チャンネル")
                except Exception:
                    try: ch = await assignee.create_dm()
                    except: ch=None
            if ch:
                emb=__d.Embed(title=f"📋 {task_name}",
                               description=f"**期日: {due.strftime('%Y/%m/%d %H:%M')}**",
                               color=__d.Color.gold())
                await ch.send(assignee.mention, embed=emb)

        await msg.reply(f"✅ 指示しました：**{assignee.display_name}** / {task_name}（期日: {due.strftime('%Y/%m/%d %H:%M')}）")
    except Exception as e:
        try: logger.error(f"[text /指示] {e}", exc_info=True)
        except: pass
# ==== /TEXT_SLASH_ASSIGN_FALLBACK ====

# ==== PREFIX_ASSIGN_COMMAND ====
import re as _re, sqlite3 as _sq, discord as _dd

@bot.command(name="指示")
async def cmd_assign(ctx):
    """
    使い方：!指示 @担当者1 [@担当者2 ...], 期日, タスク名
    例：  !指示 @山田, 明日 18:00, レポート提出
    """
    try:
        text = ctx.message.content
        # 先頭の "!指示" を剥がす
        t = _re.sub(r'^\s*!指示\s*', '', text).strip()
        # メンション以外の文字列から最初のカンマ位置を探す（全角/半角対応）
        # 形式： @A @B , 期日 , タスク名
        # まずメンション群を捌く（Bot自身は除外）
        assignees = [m for m in ctx.message.mentions if m.id != (bot.user.id if bot.user else 0)]
        if not assignees:
            await ctx.reply("❌ 担当者を @メンション してください。\n例：`!指示 @山田, 明日 18:00, レポート提出`")
            return

        # メンション表記を本文から削除した上で、カンマで分割
        t_wo_mentions = _re.sub(r'<@!?[0-9]+>', '', t).strip()
        parts = [p.strip() for p in _re.split(r'[，,]', t_wo_mentions, maxsplit=2)]
        if len(parts) < 3:
            await ctx.reply("❌ 形式：`!指示 @担当者, 期日, タスク名`（**半角`,` を2つ**。全角も可）")
            return
        due_str, task_name = parts[1], parts[2]
        if not task_name:
            await ctx.reply("❌ タスク名が空です。"); return

        # 期日パース（既存の parse_date を使用）
        try:
            due = parse_date(due_str)
        except Exception:
            due = None
        if not due:
            await ctx.reply("❌ 期日が読めませんでした。例：明日 18:00 / 3日後 / 金曜 14:30 / 2025/09/01 09:00")
            return

        created = 0
        for target in assignees:
            # DB Insert（lastrowid）
            try:
                conn=_sq.connect('reminder_bot.db'); cur=conn.cursor()
                cur.execute(
                    "INSERT INTO tasks (guild_id,instructor_id,assignee_id,task_name,due_date,message_id,channel_id) "
                    "VALUES (?,?,?,?,?,?,?)",
                    (ctx.guild.id, ctx.author.id, target.id, task_name, due, ctx.message.id, ctx.channel.id)
                )
                tid=cur.lastrowid
                conn.commit(); conn.close()
            except Exception as e:
                try: conn.close()
                except: pass
                continue

            # 個人チャンネル通知（既存の関数があれば利用）
            try:
                await send_task_notification(ctx.guild, target, ctx.author, task_name, due, ctx.message.id, task_id=tid)
            except Exception:
                # 最低限のフォールバック通知
                ch = _dd.utils.get(ctx.guild.channels, name=f"to-{target.display_name}")
                if not ch:
                    try:
                        ow={ctx.guild.default_role:_dd.PermissionOverwrite(read_messages=False),
                            target:_dd.PermissionOverwrite(read_messages=True, send_messages=True)}
                        ch=await ctx.guild.create_text_channel(f"to-{target.display_name}", overwrites=ow,
                                                               topic=f"{target.display_name}の個人タスク管理チャンネル")
                    except Exception:
                        try: ch=await target.create_dm()
                        except: ch=None
                if ch:
                    emb=_dd.Embed(title=f"📋 {task_name}",
                                   description=f"**期日: {due.strftime('%Y/%m/%d %H:%M')}**",
                                   color=_dd.Color.gold())
                    await ch.send(target.mention, embed=emb)

            created += 1

        await ctx.reply(f"✅ {created}件のタスクを指示しました。" if created else "❌ 作成に失敗しました。")
    except Exception as e:
        try: logger.error(f"[cmd_assign] {e}", exc_info=True)
        except: pass
        await ctx.reply("❌ 実行中にエラーが発生しました。")
# ==== /PREFIX_ASSIGN_COMMAND ====

# ==== READY_GUARD_FINAL ====
_ready_fired = False

@bot.event
async def on_ready():
    global _ready_fired
    if _ready_fired:
        return            # 再入禁止（2回目以降は何もしない）
    _ready_fired = True

    try:
        logger.info(f'{bot.user} has landed!')
        logger.info(f"Bot is in {len(bot.guilds)} guilds")
    except Exception:
        pass

    # init_database / setup_roles は存在すれば実行（無ければスキップ）
    try:
        init_database()
    except Exception as e:
        try: logger.warning(f"[on_ready] init_database skipped: {e}")
        except: pass

    try:
        for g in bot.guilds:
            try: await setup_roles(g)
            except Exception as e:
                try: logger.warning(f"[on_ready] setup_roles skipped in {getattr(g,'id',None)}: {e}")
                except: pass
    except Exception:
        pass
# ==== /READY_GUARD_FINAL ====

# ==== PING_COMMAND ====
@bot.command(name="ping")
async def _ping(ctx):
    try:
        await ctx.reply("pong")
    except Exception as e:
        try: logger.error(f"[ping] {e}", exc_info=True)
        except: pass
# ==== /PING_COMMAND ====

# ==== PRESENCE_KEEPALIVE ====
import discord as _d
from discord.ext import tasks

@tasks.loop(seconds=45)
async def _presence_keepalive():
    try:
        await bot.change_presence(
            status=_d.Status.online,
            activity=_d.Activity(type=_d.ActivityType.watching, name="タスク受付中")
        )
    except Exception:
        pass

@_presence_keepalive.before_loop
async def _presence_wait():  # Bot準備まで待つ
    await bot.wait_until_ready()

# setup_hook があっても無くても動くように安全に開始
_old_setup_hook = getattr(bot, "setup_hook", None)
@bot.event
async def setup_hook():
    if callable(_old_setup_hook):
        try: await _old_setup_hook()
        except TypeError: pass
    if not _presence_keepalive.is_running():
        _presence_keepalive.start()
# ==== /PRESENCE_KEEPALIVE ====

# ==== PRESENCE_KEEPALIVE ====
import discord as _d
from discord.ext import tasks

@tasks.loop(seconds=45)
async def _presence_keepalive():
    try:
        await bot.change_presence(
            status=_d.Status.online,
            activity=_d.Activity(type=_d.ActivityType.watching, name="タスク受付中")
        )
    except Exception:
        pass

@_presence_keepalive.before_loop
async def _presence_wait():  # Bot準備まで待つ
    await bot.wait_until_ready()

# setup_hook があっても無くても動くように安全に開始
_old_setup_hook = getattr(bot, "setup_hook", None)
@bot.event
async def setup_hook():
    if callable(_old_setup_hook):
        try: await _old_setup_hook()
        except TypeError: pass
    if not _presence_keepalive.is_running():
        _presence_keepalive.start()
# ==== /PRESENCE_KEEPALIVE ====

# ==== READY_OVERRIDE_HARD ====
_ready_once = False
async def __safe_ready():
    global _ready_once
    if _ready_once:
        return
    _ready_once = True
    try:
        logger.info(f"{bot.user} has landed!")
        logger.info(f"Bot is in {len(bot.guilds)} guilds")
    except Exception:
        pass
    # init_database / setup_roles は存在すれば実施、無ければ静かにスキップ
    try:
        init_database()
    except Exception as e:
        try: logger.warning(f"[on_ready] init_database skipped: {e}")
        except: pass
    try:
        for g in bot.guilds:
            try: await setup_roles(g)
            except Exception as e:
                try: logger.warning(f"[on_ready] setup_roles skipped in {getattr(g,'id',None)}: {e}")
                except: pass
    except Exception:
        pass

# すべての既存 on_ready を無視して、この関数に強制差し替え
bot.on_ready = __safe_ready
# ==== /READY_OVERRIDE_HARD ====

# ==== HARD_KILL_READY (on_ready ループ停止・一回だけ実行) ====
import types as __types

# 安全な on_ready 本体（1回だけ動く）
_ready_once = False
async def __safe_ready_impl():
    global _ready_once
    if _ready_once:  # 2回目以降は何もしない
        return
    _ready_once = True
    try:
        logger.info(f"{bot.user} has landed!")
        logger.info(f"Bot is in {len(bot.guilds)} guilds")
    except Exception:
        pass
    # init_database / setup_roles は存在すれば実行（無ければ黙ってスキップ）
    try:
        init_database()
    except Exception as e:
        try: logger.warning(f"[ready] init_database skipped: {e}")
        except: pass
    try:
        for g in bot.guilds:
            try: await setup_roles(g)
            except Exception as e:
                try: logger.warning(f"[ready] setup_roles skipped in {getattr(g,'id',None)}: {e}")
                except: pass
    except Exception:
        pass

# Client._run_event をパッチして on_ready は __safe_ready_impl だけにする
if not hasattr(bot, "_orig__run_event"):
    bot._orig__run_event = bot._run_event
    async def __patched__run_event(self, coro, event_name, *args, **kwargs):
        if event_name == "on_ready":
            await __safe_ready_impl()
            return  # 他の on_ready は呼ばない（ループ停止）
        return await bot._orig__run_event(coro, event_name, *args, **kwargs)
    bot._run_event = __types.MethodType(__patched__run_event, bot)
# ==== /HARD_KILL_READY ====

if __name__ == "__main__":
    import os
    TOKEN = os.getenv("DISCORD_BOT_TOKEN")
    if not TOKEN:
        logger.error("DISCORD_BOT_TOKEN environment variable not set")
        exit(1)
    
    try:
        logger.info("Bot starting...")
        bot.run(TOKEN)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
        exit(1)
# ---- Minimal DatabaseManager (fallback) ----
class DatabaseManager:
    @staticmethod
    def execute_query(query: str, params: tuple = ()):
        conn = sqlite3.connect('reminder_bot.db')
        cur = conn.cursor()
        try:
            cur.execute(query, params)
            rows = cur.fetchall()
            conn.commit()
            return rows
        except Exception as e:
            logger.error(f"DB error: {e}")
            conn.rollback()
            return []
        finally:
            conn.close()
# -------------------------------------------
# ==== INIT_DB_RESTORE ====
def init_database():
    import sqlite3
    conn = sqlite3.connect('reminder_bot.db')
    cur = conn.cursor()

    # admins
    cur.execute("""
        CREATE TABLE IF NOT EXISTS admins (
            user_id INTEGER,
            guild_id INTEGER,
            added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (user_id, guild_id)
        )
    """)

    # instructors
    cur.execute("""
        CREATE TABLE IF NOT EXISTS instructors (
            user_id INTEGER,
            guild_id INTEGER,
            target_users TEXT,
            added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (user_id, guild_id)
        )
    """)

    # tasks（基本カラム＋あとで不足分をALTERで補完）
    cur.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            guild_id INTEGER,
            instructor_id INTEGER,
            assignee_id INTEGER,
            task_name TEXT,
            due_date TIMESTAMP,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            message_id INTEGER,
            channel_id INTEGER,
            reminder_sent INTEGER DEFAULT 0,
            thread_id INTEGER
        )
    """)

    # notification_channels
    cur.execute("""
        CREATE TABLE IF NOT EXISTS notification_channels (
            guild_id INTEGER,
            user_id INTEGER,
            channel_id INTEGER,
            channel_type TEXT,
            PRIMARY KEY (guild_id, user_id, channel_type)
        )
    """)

    # 既存テーブルに不足カラムがあれば追加（失敗は無視）
    try:
        cur.execute("ALTER TABLE tasks ADD COLUMN reminder_sent INTEGER DEFAULT 0")
    except Exception:
        pass
    try:
        cur.execute("ALTER TABLE tasks ADD COLUMN thread_id INTEGER")
    except Exception:
        pass

    conn.commit()
    conn.close()
    try:
        logger.info("[init] database ready")
    except Exception:
        pass
# ==== /INIT_DB_RESTORE ====
# ==== SETUP_ROLES_RESTORE ====
import discord as _d

async def setup_roles(guild: _d.Guild):
    """サーバーに 'タスク管理者' / 'タスク指示者' を作成（無ければ）"""
    try:
        admin = _d.utils.get(guild.roles, name="タスク管理者")
        if not admin:
            admin = await guild.create_role(
                name="タスク管理者", color=_d.Color.red(), hoist=True, reason="reminder bot setup"
            )
        instructor = _d.utils.get(guild.roles, name="タスク指示者")
        if not instructor:
            instructor = await guild.create_role(
                name="タスク指示者", color=_d.Color.blue(), hoist=True, reason="reminder bot setup"
            )
        try:
            logger.info(f"[setup_roles] ready in {guild.name}")
        except Exception:
            pass
        return admin, instructor
    except Exception as e:
        try:
            logger.error(f"[setup_roles] error: {e}", exc_info=True)
        except Exception:
            pass
        return None, None
# ==== /SETUP_ROLES_RESTORE ====
# ==== COLOR_ENFORCER ====
import asyncio as _aio, sqlite3 as _sq, discord as _dd

def _emoji_from_status(st: str) -> str:
    return {"pending":"🟥","accepted":"🟨","completed":"🟩","abandoned":"⚠️","declined":"❌"}.get(st, "⚪")

async def _rename_thread_to_status(thread: _dd.Thread, status: str):
    try:
        if not isinstance(thread, _dd.Thread):
            return False
        em = _emoji_from_status(status)
        cur = thread.name or ""
        # 先頭絵文字を置換/付与
        for e in ("🟥","🟨","🟩","⚠️","❌","⚪"):
            if cur.startswith(e):
                new = em + cur[len(e):]
                break
        else:
            new = f"{em} {cur}"
        new = new.lstrip()
        if new != cur:
            await thread.edit(name=new)
        return True
    except Exception as e:
        try: logger.warning(f"[enforcer] rename failed: {e}")
        except: pass
        return False

from discord.ext import tasks

@tasks.loop(seconds=15)
async def color_enforcer():
    """DB上のstatusとスレッド名の先頭絵文字を同期する（最近更新のタスクのみ）"""
    try:
        conn=_sq.connect('reminder_bot.db'); cur=conn.cursor()
        # 直近更新50件程度に限定（レート制限回避）
        cur.execute("""
            SELECT id, thread_id, status
            FROM tasks
            WHERE thread_id IS NOT NULL
            ORDER BY updated_at DESC, id DESC
            LIMIT 50
        """)
        rows=cur.fetchall(); conn.close()
    except Exception as e:
        try: logger.error(f"[enforcer] DB error: {e}")
        except: pass
        return

    for tid, thread_id, status in rows:
        ch = bot.get_channel(thread_id)
        if not isinstance(ch, _dd.Thread):
            try:
                ch = await bot.fetch_channel(thread_id)
            except Exception:
                continue
        ok = await _rename_thread_to_status(ch, status or "pending")
        # 連続PATCHを避けるために少し間隔をあける
        await _aio.sleep(0.35)

@color_enforcer.before_loop
async def _enforcer_wait_ready():
    await bot.wait_until_ready()

# 手動ワンショット修正：現在のスレッドだけ即同期
@bot.command(name='色直す', aliases=['fixcolor'])
async def cmd_fixcolor(ctx):
    """（スレッドの中で実行）スレッド名の色をDBのstatusに合わせて即同期"""
    try:
        if not isinstance(ctx.channel, _dd.Thread):
            await ctx.reply("このコマンドは**スレッドの中**で実行してください。")
            return
        conn=_sq.connect('reminder_bot.db'); cur=conn.cursor()
        cur.execute("SELECT status FROM tasks WHERE thread_id=?", (ctx.channel.id,))
        row=cur.fetchone(); conn.close()
        if not row:
            await ctx.reply("このスレッドに対応するタスクが見つかりませんでした。")
            return
        status=row[0] or "pending"
        await _rename_thread_to_status(ctx.channel, status)
        await ctx.reply(f"同期しました： {status}")
    except Exception as e:
        try: logger.error(f"[fixcolor] error: {e}", exc_info=True)
        except: pass
        await ctx.reply("エラーが発生しました。")

# 常駐の開始/停止（管理者）
@bot.command(name='色監視オン')
@commands.has_permissions(administrator=True)
async def cmd_start_enforcer(ctx):
    if not color_enforcer.is_running():
        color_enforcer.start()
        await ctx.reply("色同期の常駐を**開始**しました。")
    else:
        await ctx.reply("色同期はすでに動作中です。")

@bot.command(name='色監視オフ')
@commands.has_permissions(administrator=True)
async def cmd_stop_enforcer(ctx):
    if color_enforcer.is_running():
        color_enforcer.cancel()
        await ctx.reply("色同期の常駐を**停止**しました。")
    else:
        await ctx.reply("色同期は停止中です。")
# ==== /COLOR_ENFORCER ====
# ==== BIND_THREAD_TO_TASK (手動紐付け) ====
import sqlite3 as __sq, discord as __dd

async def __helper_read_status_by_id(tid:int):
    try:
        c=__sq.connect('reminder_bot.db').cursor()
        c.execute("SELECT status FROM tasks WHERE id=?", (tid,))
        r=c.fetchone(); c.connection.close()
        return (r[0] if r else None) or "pending"
    except Exception:
        return "pending"

# 既に COLOR_ENFORCER を入れていれば _rename_thread_to_status が使える。
# 無い環境でも動くように最小版を用意しておく。
async def __rename_min(thread: __dd.Thread, status: str):
    em = {"pending":"🟥","accepted":"🟨","completed":"🟩","abandoned":"⚠️","declined":"❌"}.get(status,"⚪")
    cur = thread.name or ""
    for e in ("🟥","🟨","🟩","⚠️","❌","⚪"):
        if cur.startswith(e):
            new = em + cur[len(e):]; break
    else:
        new = f"{em} {cur}"
    new = new.lstrip()
    if new != cur:
        await thread.edit(name=new)

@bot.command(name='紐付け', aliases=['bind'])
async def bind_thread_command(ctx, task_id: int):
    """（スレッド内）このスレッドを指定Task IDに紐付けて、色も即同期します"""
    try:
        if not isinstance(ctx.channel, __dd.Thread):
            await ctx.reply("このコマンドは**スレッドの中**で実行してください。")
            return

        # DBに thread_id を保存
        conn=__sq.connect('reminder_bot.db'); cur=conn.cursor()
        cur.execute("UPDATE tasks SET thread_id=? WHERE id=?", (ctx.channel.id, task_id))
        if cur.rowcount == 0:
            conn.commit(); conn.close()
            await ctx.reply(f"❌ Task ID {task_id} が見つかりません。")
            return
        conn.commit(); conn.close()

        # 直ちに色を同期
        status = await __helper_read_status_by_id(task_id)
        try:
            # 既にある helper があれば使う
            if '_rename_thread_to_status' in globals():
                await _rename_thread_to_status(ctx.channel, status)
            else:
                await __rename_min(ctx.channel, status)
        except Exception:
            await __rename_min(ctx.channel, status)

        await ctx.reply(f"✅ 紐付け完了（Task ID {task_id} / status={status}）")
    except Exception as e:
        try: logger.error(f"[bind] error: {e}", exc_info=True)
        except: pass
        await ctx.reply("❌ 紐付け中にエラーが発生しました。")
# ==== /BIND_THREAD_TO_TASK ====
# ==== BIND_THREAD_TO_TASK (手動紐付け) ====
import sqlite3 as __sq, discord as __dd

async def __helper_read_status_by_id(tid:int):
    try:
        c=__sq.connect('reminder_bot.db').cursor()
        c.execute("SELECT status FROM tasks WHERE id=?", (tid,))
        r=c.fetchone(); c.connection.close()
        return (r[0] if r else None) or "pending"
    except Exception:
        return "pending"

# 既に COLOR_ENFORCER を入れていれば _rename_thread_to_status が使える。
# 無い環境でも動くように最小版を用意しておく。
async def __rename_min(thread: __dd.Thread, status: str):
    em = {"pending":"🟥","accepted":"🟨","completed":"🟩","abandoned":"⚠️","declined":"❌"}.get(status,"⚪")
    cur = thread.name or ""
    for e in ("🟥","🟨","🟩","⚠️","❌","⚪"):
        if cur.startswith(e):
            new = em + cur[len(e):]; break
    else:
        new = f"{em} {cur}"
    new = new.lstrip()
    if new != cur:
        await thread.edit(name=new)

@bot.command(name='紐付け', aliases=['bind'])
async def bind_thread_command(ctx, task_id: int):
    """（スレッド内）このスレッドを指定Task IDに紐付けて、色も即同期します"""
    try:
        if not isinstance(ctx.channel, __dd.Thread):
            await ctx.reply("このコマンドは**スレッドの中**で実行してください。")
            return

        # DBに thread_id を保存
        conn=__sq.connect('reminder_bot.db'); cur=conn.cursor()
        cur.execute("UPDATE tasks SET thread_id=? WHERE id=?", (ctx.channel.id, task_id))
        if cur.rowcount == 0:
            conn.commit(); conn.close()
            await ctx.reply(f"❌ Task ID {task_id} が見つかりません。")
            return
        conn.commit(); conn.close()

        # 直ちに色を同期
        status = await __helper_read_status_by_id(task_id)
        try:
            # 既にある helper があれば使う
            if '_rename_thread_to_status' in globals():
                await _rename_thread_to_status(ctx.channel, status)
            else:
                await __rename_min(ctx.channel, status)
        except Exception:
            await __rename_min(ctx.channel, status)

        await ctx.reply(f"✅ 紐付け完了（Task ID {task_id} / status={status}）")
    except Exception as e:
        try: logger.error(f"[bind] error: {e}", exc_info=True)
        except: pass
        await ctx.reply("❌ 紐付け中にエラーが発生しました。")
# ==== /BIND_THREAD_TO_TASK ====
# ==== INIT_DB_AND_ROLES (日本語版/エラー安全) ====
def init_database():
    """SQLiteのテーブルを作成／不足カラムは追加しておく"""
    import sqlite3, logging
    log = logging.getLogger(__name__)
    conn = sqlite3.connect('reminder_bot.db')
    cur  = conn.cursor()

    # 管理者
    cur.execute("""
        CREATE TABLE IF NOT EXISTS admins(
            user_id INTEGER,
            guild_id INTEGER,
            added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY(user_id, guild_id)
        )
    """)

    # 指示者
    cur.execute("""
        CREATE TABLE IF NOT EXISTS instructors(
            user_id INTEGER,
            guild_id INTEGER,
            target_users TEXT,
            added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY(user_id, guild_id)
        )
    """)

    # タスク（thread_id も持つ）
    cur.execute("""
        CREATE TABLE IF NOT EXISTS tasks(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            guild_id INTEGER,
            instructor_id INTEGER,
            assignee_id INTEGER,
            task_name TEXT,
            due_date TIMESTAMP,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            message_id INTEGER,
            channel_id INTEGER,
            reminder_sent INTEGER DEFAULT 0,
            thread_id INTEGER
        )
    """)

    # 通知チャンネル
    cur.execute("""
        CREATE TABLE IF NOT EXISTS notification_channels(
            guild_id INTEGER,
            user_id INTEGER,
            channel_id INTEGER,
            channel_type TEXT,
            PRIMARY KEY(guild_id, user_id, channel_type)
        )
    """)

    # 既存テーブルの不足カラム補完（失敗は無視）
    try: cur.execute("ALTER TABLE tasks ADD COLUMN reminder_sent INTEGER DEFAULT 0")
    except Exception: pass
    try: cur.execute("ALTER TABLE tasks ADD COLUMN thread_id INTEGER")
    except Exception: pass

    conn.commit(); conn.close()
    try: log.info("[init] データベース初期化完了")
    except Exception: pass


import discord as _d
async def setup_roles(guild: _d.Guild):
    """サーバーに 'タスク管理者' / 'タスク指示者' を作成（無ければ）"""
    try:
        admin = _d.utils.get(guild.roles, name="タスク管理者")
        if not admin:
            admin = await guild.create_role(
                name="タスク管理者", color=_d.Color.red(), hoist=True, reason="reminder bot setup"
            )
        instructor = _d.utils.get(guild.roles, name="タスク指示者")
        if not instructor:
            instructor = await guild.create_role(
                name="タスク指示者", color=_d.Color.blue(), hoist=True, reason="reminder bot setup"
            )
        try: logger.info(f"[setup_roles] ロール準備完了 in {guild.name}")
        except Exception: pass
        return admin, instructor
    except Exception as e:
        try: logger.error(f"[setup_roles] エラー: {e}", exc_info=True)
        except Exception: pass
        return None, None
# ==== /INIT_DB_AND_ROLES ====
